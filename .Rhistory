yy1 = fhat(x, cp, K, typebase = "polynomial")
yy1 = fhat(xx, cp, K, typebase = "polynomial")
yy2 = fhat(xx, cf, K, typebase = "Fourier")
plot(xx, yy, col='blue', type='l', lwd=2)
plot(xx, tt, col='blue', type='l', lwd=2)
lines(xx, yy1, col='red', lwd=2, lty=2)
lines(xx, yy2, col='green', lwd=2, lty=2)
K <- 15
# Calcul des coefficients
cp <- Calculcoef(xx, FF, K, typebase = "polynomial")
cat("Coefficients pour la base polynomiale:\n")
print(cp)
cf <- Calculcoef(xx, FF, K, typebase = "Fourier")
cat("Coefficients pour la base de Fourier:\n")
print(cf)
yy1 = fhat(xx, cp, K, typebase = "polynomial")
yy2 = fhat(xx, cf, K, typebase = "Fourier")
plot(xx, tt, col='blue', type='l', lwd=2)
lines(xx, yy1, col='red', lwd=2, lty=2)
lines(xx, yy2, col='green', lwd=2, lty=2)
K <- 6
# Calcul des coefficients
cp <- Calculcoef(xx, FF, K, typebase = "polynomial")
cat("Coefficients pour la base polynomiale:\n")
print(cp)
cf <- Calculcoef(xx, FF, K, typebase = "Fourier")
K <- 6
# Calcul des coefficients
cp <- Calculcoef(xx, FF, K, typebase = "polynomial")
cat("Coefficients pour la base polynomiale:\n")
print(cp)
cf <- Calculcoef(xx, FF, K, typebase = "Fourier")
cf <- Calculcoef(xx, FF, K, typebase = "Fourier")
K <- 7
# Calcul des coefficients
cp <- Calculcoef(xx, FF, K, typebase = "polynomial")
cat("Coefficients pour la base polynomiale:\n")
print(cp)
cf <- Calculcoef(xx, FF, K, typebase = "Fourier")
cat("Coefficients pour la base de Fourier:\n")
print(cf)
yy1 = fhat(xx, cp, K, typebase = "polynomial")
yy2 = fhat(xx, cf, K, typebase = "Fourier")
plot(xx, tt, col='blue', type='l', lwd=2)
lines(xx, yy1, col='red', lwd=2, lty=2)
lines(xx, yy2, col='green', lwd=2, lty=2)
K <- 10
# Calcul des coefficients
cp <- Calculcoef(xx, FF, K, typebase = "polynomial")
cat("Coefficients pour la base polynomiale:\n")
print(cp)
cf <- Calculcoef(xx, FF, K, typebase = "Fourier")
cat("Coefficients pour la base de Fourier:\n")
print(cf)
yy1 = fhat(xx, cp, K, typebase = "polynomial")
yy2 = fhat(xx, cf, K, typebase = "Fourier")
K <- 11
# Calcul des coefficients
cp <- Calculcoef(xx, FF, K, typebase = "polynomial")
cat("Coefficients pour la base polynomiale:\n")
print(cp)
cf <- Calculcoef(xx, FF, K, typebase = "Fourier")
cat("Coefficients pour la base de Fourier:\n")
print(cf)
yy1 = fhat(xx, cp, K, typebase = "polynomial")
yy2 = fhat(xx, cf, K, typebase = "Fourier")
plot(xx, tt, col='blue', type='l', lwd=2)
lines(xx, yy1, col='red', lwd=2, lty=2)
lines(xx, yy2, col='green', lwd=2, lty=2)
plot(xx, tt, col='blue', type='l', lwd=2)
lines(xx, yy1, col='red', lwd=2, lty=2)
lines(xx, yy2, col='green', lwd=2, lty=2)
tt1 = fhat(xx, cp, K, typebase = "polynomial")
tt2 = fhat(xx, cf, K, typebase = "Fourier")
plot(xx, tt, col='blue', type='l', lwd=2)
lines(xx, tt1, col='red', lwd=2, lty=2)
lines(xx, tt2, col='green', lwd=2, lty=2)
FF <- (xx+1)*cos(pi*xx)
K <- 11
# Calcul des coefficients
cp <- Calculcoef(xx, FF, K, typebase = "polynomial")
cat("Coefficients pour la base polynomiale:\n")
print(cp)
cf <- Calculcoef(xx, FF, K, typebase = "Fourier")
cat("Coefficients pour la base de Fourier:\n")
print(cf)
tt1 = fhat(xx, cp, K, typebase = "polynomial")
tt2 = fhat(xx, cf, K, typebase = "Fourier")
plot(xx, tt, col='blue', type='l', lwd=2)
lines(xx, tt1, col='red', lwd=2, lty=2)
lines(xx, tt2, col='green', lwd=2, lty=2)
K <- 5
# Calcul des coefficients
cp <- Calculcoef(xx, FF, K, typebase = "polynomial")
cat("Coefficients pour la base polynomiale:\n")
print(cp)
cf <- Calculcoef(xx, FF, K, typebase = "Fourier")
cat("Coefficients pour la base de Fourier:\n")
print(cf)
tt1 = fhat(xx, cp, K, typebase = "polynomial")
tt2 = fhat(xx, cf, K, typebase = "Fourier")
plot(xx, tt, col='blue', type='l', lwd=2)
lines(xx, tt1, col='red', lwd=2, lty=2)
lines(xx, tt2, col='green', lwd=2, lty=2)
MF = mean(FF)
FF = FF - MF
# Calcul des coefficients
cp <- Calculcoef(xx, FF, K, typebase = "polynomial")
cat("Coefficients pour la base polynomiale:\n")
print(cp)
cf <- Calculcoef(xx, FF, K, typebase = "Fourier")
cat("Coefficients pour la base de Fourier:\n")
print(cf)
tt1 = MF+fhat(xx, cp, K, typebase = "polynomial")
tt2 = MF+ fhat(xx, cf, K, typebase = "Fourier")
plot(xx, tt, col='blue', type='l', lwd=2)
lines(xx, tt1, col='red', lwd=2, lty=2)
lines(xx, tt2, col='green', lwd=2, lty=2)
K <- 15
MF = mean(FF)
FF = FF - MF
# Calcul des coefficients
cp <- Calculcoef(xx, FF, K, typebase = "polynomial")
cat("Coefficients pour la base polynomiale:\n")
print(cp)
cf <- Calculcoef(xx, FF, K, typebase = "Fourier")
cat("Coefficients pour la base de Fourier:\n")
print(cf)
tt1 = MF+fhat(xx, cp, K, typebase = "polynomial")
tt2 = MF+ fhat(xx, cf, K, typebase = "Fourier")
plot(xx, tt, col='blue', type='l', lwd=2)
lines(xx, tt1, col='red', lwd=2, lty=2)
lines(xx, tt2, col='green', lwd=2, lty=2)
K <- 6
MF = mean(FF)
FF = FF - MF
# Calcul des coefficients
cp <- Calculcoef(xx, FF, K, typebase = "polynomial")
cat("Coefficients pour la base polynomiale:\n")
print(cp)
cf <- Calculcoef(xx, FF, K, typebase = "Fourier")
cat("Coefficients pour la base de Fourier:\n")
print(cf)
tt1 = MF+fhat(xx, cp, K, typebase = "polynomial")
tt2 = MF+ fhat(xx, cf, K, typebase = "Fourier")
plot(xx, tt, col='blue', type='l', lwd=2)
lines(xx, tt1, col='red', lwd=2, lty=2)
library(latex2exp)
library(viridis)
theta <- function(x){
o = sin(2*pi*x[1])*cos(2*pi*x[2])
return(o)
}
xx = yy = seq(0,1, length=100)
#xx = expand.grid(seq(0,1, length=100),seq(0,1, length=100))
zz = outer(xx,yy, function(u,v){theta(c(u,v))})
library(latex2exp)
library(viridis)
xx <- seq(0, 1, length.out = 100)
library(latex2exp)
library(viridis)
theta <- function(x){
o = sin(2*pi*x[1])*cos(2*pi*x[2])
return(o)
}
xx <- seq(0, 1, length.out = 100)
yy <- seq(0, 1, length.out = 100)
zz <- outer(xx, yy, theta)
theta <- function(x,y){
o = sin(2*pi*x)*cos(2*pi*y)
return(o)
}
xx <- seq(0, 1, length.out = 100)
yy <- seq(0, 1, length.out = 100)
zz <- outer(xx, yy, theta)
image(xx, yy, zz, col = terrain.colors(50), xlab = "x", ylab = "y",
main = "Paramètres fonctionnelles",cex=1.25,
lwd=2, col=viridis(15), xlim=c(0,1), ylim=c(0,1))
image(xx, yy, zz, col = terrain.colors(100), xlab = "x", ylab = "y",
main = "Paramètres fonctionnelles",cex=1.25,
lwd=2, xlim=c(0,1), ylim=c(0,1))
image(xx, yy, zz, col = viridis(100), xlab = "x", ylab = "y",
main = "Paramètres fonctionnelles",cex=1.25,
lwd=2, xlim=c(0,1), ylim=c(0,1))
theta <- function(x,y){
o = sin(2*pi*x)*cos(2*pi*y)
return(o)
}
xx <- seq(-1, 1, length.out = 100)
yy <- seq(-1, 1, length.out = 100)
zz <- outer(xx, yy, theta)
image(xx, yy, zz, col = viridis(100), xlab = "x", ylab = "y",
main = "Paramètres fonctionnelles",cex=1.25,
lwd=2, xlim=c(-1,1), ylim=c(-1,1))
theta <- function(x1, x2) { 1 + 2*sin(2*pi*x1) - cos(2*pi*x2) }
xx <- seq(0, 1, length.out = 100)
yy <- seq(0, 1, length.out = 100)
zz <- outer(xx, yy, theta)
image(xx, yy, zz, col = viridis(100), xlab = "x", ylab = "y",
main = "Paramètres fonctionnelles",cex=1.25,
lwd=2)
zz <- outer(xx, yy, theta)
image(xx, yy, zz, col = viridis(100), xlab = "x", ylab = "y",
main = "Paramètres fonctionnelles",cex=1.25,
lwd=2)
x1 <- seq(0, 1, length.out = 100)
x2 <- seq(0, 1, length.out = 100)
grid <- expand.grid(x1 = x1, x2 = x2)
# Calcul de theta(x)
theta <- with(grid, 1 + 2 * sin(2 * pi * x1) - cos(2 * pi * x2))
# Calcul de f(x)
f <- exp(-theta^2) * sin(2 * pi * grid$x1 * grid$x2)
# Visualisation
z <- matrix(f, nrow = 100)
persp(x1, x2, z, theta = 30, phi = 30, col = "lightcoral",
xlab = "x1", ylab = "x2", zlab = "f(x)", main = "f(x) = exp(-θ(x)^2) * sin(2π x1 x2)")
persp(x1, x2, z, theta = 30, phi = 30, col = viridis(120),
xlab = "x1", ylab = "x2", zlab = "f(x)", main = "f(x) = exp(-θ(x)^2) * sin(2π x1 x2)")
theta <- function(x1, x2) {
o=1 + 2*sin(2*pi*x1) - cos(2*pi*x2)
o = exp(-o^2) * sin(2*pi*x1*x2)
return(o)
}
xx <- seq(0, 1, length.out = 100)
yy <- seq(0, 1, length.out = 100)
zz <- outer(xx, yy, theta)
image(xx, yy, zz, col = viridis(100), xlab = "x", ylab = "y",
main = "Paramètres fonctionnelles",cex=1.25,
lwd=2)
image(xx, yy, zz, col = viridis(10), xlab = "x", ylab = "y",
main = "Paramètres fonctionnelles",cex=1.25,
lwd=2)
image(xx, yy, zz, col = viridis(33), xlab = "x", ylab = "y",
main = "Paramètres fonctionnelles",cex=1.25,
lwd=2)
image(xx, yy, zz, col = viridis(50), xlab = "x", ylab = "y",
main = "Paramètres fonctionnelles",cex=1.25,
lwd=2)
theta <- function(x1, x2) {
o=1 + 2*sin(2*pi*x1) - cos(2*pi*x2)
o = exp(-o^2) * x1*x2
return(o)
}
xx <- seq(0, 1, length.out = 100)
yy <- seq(0, 1, length.out = 100)
zz <- outer(xx, yy, theta)
image(xx, yy, zz, col = viridis(50), xlab = "x", ylab = "y",
main = "Paramètres fonctionnelles",cex=1.25,
lwd=2)
library(viridis)
theta <- function(x1, x2) {
o=1 + 2*sin(2*pi*x1) - cos(2*pi*x2)
o = exp(-o^2) * cos(2*pi*x1*x2)
return(o)
}
xx <- seq(0, 1, length.out = 100)
yy <- seq(0, 1, length.out = 100)
zz <- outer(xx, yy, theta)
image(xx, yy, zz, col = viridis(50), xlab = "x", ylab = "y",
main = "Paramètres fonctionnelles",cex=1.25,
lwd=2)
image(xx, yy, zz, col = viridis(150), xlab = "x", ylab = "y",
main = "Paramètres fonctionnelles",cex=1.25,
lwd=2)
theta <- function(x1, x2) {
o=1 + 2*sin(2*pi*x1) - cos(2*pi*x2)
o = exp(-o^2) * sin(pi*x1*x2)
return(o)
}
xx <- seq(0, 1, length.out = 100)
yy <- seq(0, 1, length.out = 100)
zz <- outer(xx, yy, theta)
image(xx, yy, zz, col = viridis(150), xlab = "x", ylab = "y",
main = "Paramètres fonctionnelles",cex=1.25,
lwd=2)
theta <- function(x1, x2) {
o=1 + 2*sin(2*pi*x1) - cos(2*pi*x2)
o = exp(-o^2) * sin(0.5*pi*x1*x2)
return(o)
}
xx <- seq(0, 1, length.out = 100)
yy <- seq(0, 1, length.out = 100)
zz <- outer(xx, yy, theta)
image(xx, yy, zz, col = viridis(150), xlab = "x", ylab = "y",
main = "Paramètres fonctionnelles",cex=1.25,
lwd=2)
theta <- function(x1, x2) {
o=1 + 2*sin(2*pi*x1) - cos(2*pi*x2)
# o = exp(-o^2) * sin(2*pi*x1*x2)
r = (6*x1-2)**2)*sin(4*o*x2)
return(o)
}
xx <- seq(0, 1, length.out = 100)
theta <- function(x1, x2) {
o=1 + 2*sin(2*pi*x1) - cos(2*pi*x2)
# o = exp(-o^2) * sin(2*pi*x1*x2)
r = ((6*x1-2)**2)*sin(4*o*x2)
return(o)
}
xx <- seq(0, 1, length.out = 100)
yy <- seq(0, 1, length.out = 100)
zz <- outer(xx, yy, theta)
image(xx, yy, zz, col = viridis(150), xlab = "x", ylab = "y",
main = "Paramètres fonctionnelles",cex=1.25,
lwd=2)
theta <- function(x1, x2) {
o= 1 + 2*sin(2*pi*x1) - cos(2*pi*x2)
# o = exp(-o^2) * sin(2*pi*x1*x2)
r = ((6*x1-2)**2)*sin(4*o*x2)
return(o)
}
xx <- seq(0, 1, length.out = 100)
yy <- seq(0, 1, length.out = 100)
zz <- outer(xx, yy, theta)
image(xx, yy, zz, col = viridis(150), xlab = "x1", ylab = "x2",
main = "Paramètres fonctionnelles",cex=1.25, lwd=2)
image(xx, yy, zz, col = viridis(100), xlab = "x1", ylab = "x2",
main = "Paramètres fonctionnelles",cex=1.25, lwd=2)
image(xx, yy, zz, col = viridis(50), xlab = "x1", ylab = "x2",
main = "Paramètres fonctionnelles",cex=1.25, lwd=2)
theta <- function(x1, x2) {
o= 1 + 2*sin(2*pi*x1) - cos(2*pi*x2)
# o = exp(-o^2) * sin(2*pi*x1*x2)
r = ((6*x1-2)**2)*sin(4*o*x2)
return(r)
}
xx <- seq(0, 1, length.out = 100)
yy <- seq(0, 1, length.out = 100)
zz <- outer(xx, yy, theta)
image(xx, yy, zz, col = viridis(50), xlab = "x1", ylab = "x2",
main = "Paramètres fonctionnelles",cex=1.25, lwd=2)
theta <- function(x1, x2) {
o= 1 + 2*sin(2*pi*x1) - cos(2*pi*x2)
# o = exp(-o^2) * sin(2*pi*x1*x2)
r = ((6*x1-2)**2)*sin(4*o*x2-2)
return(r)
}
xx <- seq(0, 1, length.out = 100)
yy <- seq(0, 1, length.out = 100)
zz <- outer(xx, yy, theta)
image(xx, yy, zz, col = viridis(50), xlab = "x1", ylab = "x2",
main = "Paramètres fonctionnelles",cex=1.25, lwd=2)
theta <- function(x1, x2) {
o= 1 + 2*sin(2*pi*x1) - cos(2*pi*x2)
# o = exp(-o^2) * sin(2*pi*x1*x2)
r = ((6*x1-2)**2)*sin(pi*o*x2)
return(r)
}
xx <- seq(0, 1, length.out = 100)
yy <- seq(0, 1, length.out = 100)
zz <- outer(xx, yy, theta)
image(xx, yy, zz, col = viridis(50), xlab = "x1", ylab = "x2",
main = "Paramètres fonctionnelles",cex=1.25, lwd=2)
theta <- function(x1, x2) {
o= 1 + 2*sin(2*pi*x1) - cos(2*pi*x2)
# o = exp(-o^2) * sin(2*pi*x1*x2)
r = ((6*x1-2)**2)*sin(o*x2 - 4)
return(r)
}
xx <- seq(0, 1, length.out = 100)
yy <- seq(0, 1, length.out = 100)
zz <- outer(xx, yy, theta)
image(xx, yy, zz, col = viridis(50), xlab = "x1", ylab = "x2",
main = "Paramètres fonctionnelles",cex=1.25, lwd=2)
theta <- function(x1, x2) {
o= 1 + 2*sin(2*pi*x1) - cos(2*pi*x2)
# o = exp(-o^2) * sin(2*pi*x1*x2)
r = (6*x1-2)*(6*x1-2)*sin(o*x2 - 4)
return(r)
}
xx <- seq(0, 1, length.out = 100)
yy <- seq(0, 1, length.out = 100)
zz <- outer(xx, yy, theta)
image(xx, yy, zz, col = viridis(50), xlab = "x1", ylab = "x2",
main = "Paramètres fonctionnelles",cex=1.25, lwd=2)
theta <- function(x1, x2) {
o= 1 + 2*sin(2*pi*x1) - cos(2*pi*x2)
# o = exp(-o^2) * sin(2*pi*x1*x2)
r = (6*x1-2)*(6*x2-2)*sin(o*x2 - 4)
return(r)
}
xx <- seq(0, 1, length.out = 100)
yy <- seq(0, 1, length.out = 100)
zz <- outer(xx, yy, theta)
image(xx, yy, zz, col = viridis(50), xlab = "x1", ylab = "x2",
main = "Paramètres fonctionnelles",cex=1.25, lwd=2)
theta <- function(x) {
r = sin(3*x)**2
return(r)
}
xx = seq(-3,3, len=100)
yy = theta(xx)
plot(xx, yy, col='red', type='l', lwd=2)
theta <- function(x1, x2) {
o= 1 + 2*sin(2*pi*x1) - cos(2*pi*x2)
# o = exp(-o^2) * sin(2*pi*x1*x2)
r = exp(-o - x1**2)
return(r)
}
xx <- seq(0, 1, length.out = 100)
yy <- seq(0, 1, length.out = 100)
zz <- outer(xx, yy, theta)
image(xx, yy, zz, col = viridis(50), xlab = "x1", ylab = "x2",
main = "Paramètres fonctionnelles",cex=1.25, lwd=2)
theta <- function(x1, x2) {
o= 1 + 2*sin(2*pi*x1) - cos(2*pi*x2)
# o = exp(-o^2) * sin(2*pi*x1*x2)
r = exp(-o - x1**2-x2**2)
return(r)
}
xx <- seq(0, 1, length.out = 100)
yy <- seq(0, 1, length.out = 100)
zz <- outer(xx, yy, theta)
image(xx, yy, zz, col = viridis(50), xlab = "x1", ylab = "x2",
main = "Paramètres fonctionnelles",cex=1.25, lwd=2)
theta <- function(x) {
r = sin(3*x)
return(r)
}
xx = seq(-3,3, len=100)
yy = theta(xx)
plot(xx, yy, col='red', type='l', lwd=2)
theta <- function(x) {
r = exp(-x**2)
return(r)
}
xx = seq(-3,3, len=100)
yy = theta(xx)
plot(xx, yy, col='red', type='l', lwd=2)
xx = seq(0,3, len=100)
yy = theta(xx)
plot(xx, yy, col='red', type='l', lwd=2)
theta <- function(x) {
r = (x**2)*sin(12*x)
return(r)
}
xx = seq(0,3, len=100)
yy = theta(xx)
plot(xx, yy, col='red', type='l', lwd=2)
xx = seq(0,1, len=100)
yy = theta(xx)
plot(xx, yy, col='red', type='l', lwd=2)
theta <- function(x) {
r = (x**2)*sin(6*x)
return(r)
}
xx = seq(0,1, len=100)
yy = theta(xx)
plot(xx, yy, col='red', type='l', lwd=2)
theta <- function(x) {
r = (x**2)*sin(6*x)
r = exp(-r -x**2)
return(r)
}
xx = seq(0,1, len=100)
yy = theta(xx)
plot(xx, yy, col='red', type='l', lwd=2)
theta <- function(x) {
r = (x**2)*sin(6*x)
r = x**2exp(-r)
return(r)
}
theta <- function(x) {
r = (x**2)*sin(6*x)
r = (x**2)exp(-r)
return(r)
}
xx = seq(0,1, len=100)
yy = theta(xx)
plot(xx, yy, col='red', type='l', lwd=2)
theta <- function(x) {
r = (x**2)*sin(6*x)
r = (x**2)exp(-r)
return(r)
}
theta <- function(x) {
r = (x**2)*sin(6*x)
r = (x**2)*exp(-r)
return(r)
}
xx = seq(0,1, len=100)
yy = theta(xx)
plot(xx, yy, col='red', type='l', lwd=2)
# Définition de la fonction de Rosenbrock
rosenbrock <- function(x, y) {
(1 - x)^2 + 100 * (y - x^2)^2
}
x_vals <- seq(-1, 1, length.out = 100)
y_vals <- seq(-1, 1, length.out = 100)
grid <- expand.grid(x = x_vals, y = y_vals)
z_vals <- matrix(rosenbrock(grid$x, grid$y), nrow = 100, byrow = TRUE)
persp(x_vals, y_vals, z_vals,
theta = 30, phi = 30,
col = "lightblue",
xlab = "x", ylab = "y", zlab = "f(x, y)",
main = "Fonction de Rosenbrock")
theta <- function(x1, x2) {
#o= 1 + 2*sin(2*pi*x1) - cos(2*pi*x2)
# o = exp(-o^2) * sin(2*pi*x1*x2)
r = (1 - x1)^2 + 100 * (x1 - x2^2)^2
return(r)
}
xx <- seq(-1, 1, length.out = 100)
yy <- seq(-1, 1, length.out = 100)
zz <- outer(xx, yy, theta)
image(xx, yy, zz, col = viridis(50), xlab = "x1", ylab = "x2",
main = "Paramètres fonctionnelles",cex=1.25, lwd=2)
xx <- seq(0, 1, length.out = 100)
yy <- seq(0, 1, length.out = 100)
zz <- outer(xx, yy, theta)
image(xx, yy, zz, col = viridis(50), xlab = "x1", ylab = "x2",
main = "Paramètres fonctionnelles",cex=1.25, lwd=2)
